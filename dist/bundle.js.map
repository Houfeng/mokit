{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    ".tmp/info.json",
    "lib/app.js",
    "lib/component/index.js",
    "lib/dynamic.js",
    "lib/index.js",
    "lib/template/compiler.js",
    "lib/template/directive.js",
    "lib/template/directives/attr.js",
    "lib/template/directives/each.js",
    "lib/template/directives/if.js",
    "lib/template/directives/index.js",
    "lib/template/directives/inner-html.js",
    "lib/template/directives/inner-text.js",
    "lib/template/directives/model-checkbox.js",
    "lib/template/directives/model-editable.js",
    "lib/template/directives/model-input.js",
    "lib/template/directives/model-radio.js",
    "lib/template/directives/model-select.js",
    "lib/template/directives/on.js",
    "lib/template/directives/prop.js",
    "lib/template/directives/text.js",
    "lib/template/expression.js",
    "lib/template/index.js",
    "lib/template/observer/index.js",
    "lib/template/template.js",
    "lib/watcher/index.js",
    "node_modules/cify/index.js",
    "node_modules/events/events.js",
    "node_modules/ntils/index.js"
  ],
  "names": [],
  "mappingsxRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxr
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports={\"name\":\"mokit\",\"version\":\"0.0.1\"}",
    "const Class = require('cify');\nconst Template = require('./template');\nconst Compiler = Template.Compiler;\nconst utils = Template.utils;\n\n/**\n * 应用程序类，继承于 Component\n */\nconst App = new Class({\n\n  constructor: function (options) {\n    options = options || Object.create(null);\n    this.components = Object.create(null);\n    this.element = options.element;\n    this.prefix = options.prefix;\n    utils.defineFreezeProp(this, 'compiler', new Compiler({\n      prefix: this.prefix,\n      directives: this.directives\n    }));\n  },\n\n  directive: function (name, Directive) {\n    if (!Directive) {\n      Directive = name;\n      name = null;\n    }\n    Directive.prototype.app = this;\n    Directive.definition.name = name || Directive.definition.name;\n    this.compiler.directives.push(Directive);\n  },\n\n  component: function (name, Component) {\n    this.components[name] = Component;\n  },\n\n  start: function () {\n    utils.defineFreezeProp(this, 'template', new Template(this.element, {\n      compiler: this.compiler\n    }));\n    this.template.bind(this);\n  }\n\n});\n\nmodule.exports = App;\n\n",
    "const Class = require('cify');\nconst Template = require('../template');\nconst Watcher = require('../watcher');\nconst utils = Template.utils;\nconst EventEmitter = require('events');\nconst Observer = Template.Observer;\n\nconst RESERVED_WORDS = [\n  '$compile', '$data', '$dispose', '$element', '$mount', '$properties',\n  '$remove', '$watch', '_callHook', '_compiled', '_createData', '_createProperties',\n  '_createWatches', '_extends', '_mounted', '_observer', '_onTemplateUpdate',\n  '_removed', '_template', '_watchers'\n];\n\n/**\n * 组件类\n * 用于定义一个新的组件\n */\nconst Component = function (options) {\n\n  //处理组件选项\n  options = options || Object.create(null);\n\n  //处理「继承」\n  if (utils.isFunction(options.extends)) {\n    options.extends = options.extends.prototype;\n  }\n\n  /**\n   * 定义组件类\n   * 可以通过 new ComponentClass() 创建组件实例\n   */\n  var ComponentClass = new Class({\n\n    //通过 cify 定义为一个「类」，并指定「父类」或「原型」\n    _extends: options.extends,\n\n    /**\n     * 组件类构造函数\n     * @returns {void} 无返回\n     */\n    constructor: function () {\n      this._onTemplateUpdate = this._onTemplateUpdate.bind(this);\n      this._createData(this.data);\n      this._createProperties(this.properties);\n      this._createWatches(this.watches);\n      this._callHook('onInit');\n      this._observer = Observer.observe(this);\n    },\n\n    /**\n     * 调用生命周期 hook\n     * @param {string} name 调用的 hook 名称\n     * @param {Array} args 调用 hook 的参数列表\n     * @returns {void} 无反回\n     */\n    _callHook: function (name, args) {\n      if (!utils.isFunction(this[name])) return;\n      this[name].apply(this, args);\n    },\n\n    /**\n     * 创建数据对象\n     * @param {Object} data 组件数据对象\n     * @returns {void} 无返回\n     */\n    _createData: function (data) {\n      if (utils.isFunction(data)) {\n        this.$data = data.call(this);\n      } else {\n        this.$data = data || {};\n      }\n      utils.each(this.$data, function (name) {\n        Object.defineProperty(this, name, {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            if (!this.$data) return;\n            return this.$data[name];\n          },\n          set: function (value) {\n            if (!this.$data) return;\n            this.$data[name] = value;\n          }\n        });\n      }, this);\n    },\n\n    /**\n     * 创建组件属性\n     * @param {Object} properties 属性定义对象\n     * @returns {void} 无返回\n     */\n    _createProperties: function (properties) {\n      this.$properties = {};\n      var isArray = utils.isArray(properties);\n      utils.each(properties, function (name, descriptor) {\n        if (utils.isFunction(descriptor)) {\n          descriptor = { get: descriptor };\n        }\n        if (!utils.isObject(descriptor)) {\n          descriptor = { value: descriptor };\n        }\n        var hasGetterOrSetter = descriptor.get || descriptor.set;\n        var hasValue = ('value' in descriptor);\n        if (hasGetterOrSetter && hasValue) {\n          throw new Error('Cannot specify both value and setter/getter' + '` for property `' + name + '`');\n        }\n        if (!hasGetterOrSetter) {\n          if (!hasValue) descriptor.value = null;\n          descriptor.get = function () {\n            return descriptor.value;\n          };\n          descriptor.set = function (value) {\n            descriptor.value = value;\n          };\n        }\n        Object.defineProperty(this, name, {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            if (!descriptor.get) {\n              throw new Error('Property `' + name + '` cannot be read');\n            }\n            return descriptor.get.call(this);\n          },\n          set: function (value) {\n            if (!descriptor.set) {\n              throw new Error('Property `' + name + '` cannot be written');\n            }\n            if (descriptor.test && !descriptor.test(value)) {\n              throw new Error('Invalid value `' + value + '` for property `' + name + '`');\n            }\n            descriptor.set.call(this, value);\n          }\n        });\n        this.$properties[name] = descriptor;\n      }, this);\n    },\n\n    /**\n     * 创建监控\n     * 为什么用 watches 而不是 watchers 或其它？\n     * 因为，这里仅是「监控配置」并且是「复数」\n     * @param {Object} watches 监控定义对象\n     * @returns {void} 无返回\n     */\n    _createWatches: function (watches) {\n      this._watchers = this._watchers || [];\n      utils.each(watches, function (name, handler) {\n        this.$watch(name, handler);\n      }, this);\n    },\n\n    /**\n     * 在模板发生更新时\n     * @returns {void} 无返回\n     */\n    _onTemplateUpdate: function () {\n      this._watchers.forEach(function (watcher) {\n        watcher.calc();\n      }, this);\n    },\n\n    /**\n     * 添加一个监控\n     * @param {string|function} calcer 计算函数或路径\n     * @param {function} handler 处理函数\n     * @returns {void} 无返回\n     */\n    $watch: function (calcer, handler) {\n      if (!utils.isFunction(handler)) return;\n      if (!utils.isFunction(calcer)) {\n        var path = calcer;\n        calcer = function () {\n          return utils.getByPath(this, path);\n        };\n      }\n      this._watchers.push(new Watcher(calcer.bind(this), handler.bind(this)));\n    },\n\n    /**\n     * 编译自身模板并完成绑定\n     * @returns {void} 无返回\n     */\n    $compile: function () {\n      if (!this.template) throw new Error('Invalid template');\n      if (this._compiled) return;\n      this._compiled = true;\n      this._callHook('onCreate');\n      utils.defineFreezeProp(this, '$element', utils.parseDom(this.template)[0]);\n      if (!this.$element || this.$element.nodeName === '#text') {\n        throw new Error('Invalid component template');\n      }\n      this._callHook('onCreated');\n      utils.defineFreezeProp(this, '_template', new Template(this.$element));\n      this._template.bind(this);\n      this._template.on('update', this._onTemplateUpdate);\n      this._callHook('onReady');\n    },\n\n    /**\n     * 向 DOM tree 中挂截组件\n     * @param {HTMLNode} mountNode 挂载点元素\n     * @returns 无返回 \n     */\n    $mount: function (mountNode) {\n      this.$compile();\n      if (this._mounted) return;\n      this._callHook('onMount');\n      mountNode.parentNode.insertBefore(this.$element, mountNode);\n      this._mounted = true;\n      this._removed = false;\n      this._callHook('onMounted');\n    },\n\n    /**\n     * 移除组件\n     * @returns {void} 无返回\n     */\n    $remove: function () {\n      if (this._removed || !this._mounted) return;\n      this._callHook('onRemove');\n      this.$element.parentNode.removeChild(this.$element);\n      this._removed = true;\n      this._mounted = false;\n      this._callHook('onRemoved');\n    },\n\n    /**\n     * 释放组件\n     * @returns {void} 无返回\n     */\n    $dispose: function () {\n      this.$remove();\n      this._callHook('onDispose');\n      if (this._compiled) {\n        this._template.unbind();\n      }\n      this._callHook('onDisposed');\n      for (name in this) {\n        delete this[name];\n      }\n      ['__observer__', '$element', '_template']\n        .forEach(function (name) {\n          delete this[name];\n        }, this);\n      this.__proto__ = null;\n    }\n\n  });\n\n  //向 ComponentClass.prototype 上拷贝成员\n  utils.each(options, function (name, value) {\n    if (RESERVED_WORDS.indexOf(name) > -1) {\n      throw new Error('Name `' + name + '` is reserved')\n    }\n    ComponentClass.prototype[name] = value;\n  }, this);\n\n  //使 ComponentClass instanceof Component === true\n  ComponentClass.__proto__ = Component.prototype;\n\n  //定义扩展方法\n  ComponentClass.extend = function (options) {\n    options = options || Object.create(null);\n    options.extends = this;\n    return new Component(options);\n  };\n\n  return ComponentClass;\n\n};\n\n//组件扩展方法，简单封装 extends\nComponent.extend = function (options) {\n  options = options || Object.create(null);\n  return new Component(options);\n};\n\nmodule.exports = Component;",
    "const Component = require('./component');\nconst utils = require('ntils');\n\nconst Dynamic = new Component({\n\n  template: '<iframe src=\"{{src}}\"></iframe>',\n\n  properties: {\n    src: {\n      value: null,\n      test: function (value) {\n        return value && value.length > 5;\n      }\n    }\n  },\n\n  refresh: function () {\n    if (!this.src) return;\n    this.src = this.src.split('?')[0] + '?=' + Date.now();\n  },\n\n  onReady: function () {\n\n  },\n\n  watches: {\n\n  }\n\n\n});\n\n\nmodule.exports = Dynamic;\nwindow.Dynamic = Dynamic;",
    "const info = require('../.tmp/info.json');\nconst utils = require('ntils');\nconst Template = require('./template');\nconst Component = require('./component');\nconst Watcher = require('./watcher');\nconst App = require('./app');\n\nApp.version = info.version;\nApp.Component = Component;\nApp.Watcher = Watcher;\nApp.Template = Template;\n\n//持载模板相关对象\nutils.copy(Template, App);\n\n//普通脚本引入\nif (window) window[info.name] = App;\n//amd 模块\nif (typeof define !== 'undefined' && define.amd) {\n  define(info.name, [], function () {\n    return App;\n  });\n}\n\nApp.Dynamic = require('./dynamic');\n\nApp.App = App;\nmodule.exports = App;",
    "const Class = require('cify');\nconst Directive = require('./directive');\nconst utils = require('ntils');\nconst Expression = require('./expression');\nconst directives = require('./directives');\n\nconst DEFAULT_PREFIX = 'm';\n\n/**\n * 模板编译器\n * 可以通过指定「前缀」或「指令集」构建实例\n */\nconst Compiler = new Class({\n\n  /**\n   * 构造一个编译器\n   * @param {Object} options 选项\n   * @returns {void} 无返回\n   */\n  constructor: function (options) {\n    options = options || Object.create(null);\n    options.directives = options.directives || [];\n    this.prefix = options.prefix || DEFAULT_PREFIX;\n    this.directives = directives.concat(options.directives);\n  },\n\n  /**\n   * 解析要匹配的名称\n   * @param {string} name 要解析的名称字符串\n   * @param {HTMLNode} node 当前 HTML 元素结点\n   * @returns {Object} 解析后的对象\n   */\n  _parseMatchInfo: function (name, type, node) {\n    var parts = name.split(':');\n    var info = {\n      type: type,\n      compiler: this,\n      node: node\n    };\n    if (parts.length > 1) {\n      info.prefix = parts[0];\n      info.name = parts[1];\n      info.decorates = parts.slice(2);\n    } else {\n      info.prefix = null;\n      info.name = parts[0];\n      info.decorates = [];\n    }\n    return info;\n  },\n\n  /**\n   * 查找所有匹配的指令\n   * @param {Object} matchInfo 匹配信息\n   * @returns {Array} 指令列表\n   */\n  _findDirectives: function (matchInfo) {\n    return this.directives.filter(function (Directive) {\n      return Directive.definition.test(matchInfo);\n    }, this);\n  },\n\n  /**\n   * 创建一个指令实例\n   * @param {Directive} Directive 指令类\n   * @param {Object} options 指令构建选项\n   * @returns {Directive} 指令实例\n   */\n  _createDirectiveInstance: function (Directive, options) {\n    options.compiler = this;\n    options.prefix = this.prefix;\n    return new Directive(options);\n  },\n\n  /**\n   * 初始化一个编译完成的 handler\n   * @param {function} handler 编译后的的模板函数\n   * @returns {void} 无返回\n   */\n  _bindHandler: function (handler) {\n    //排序 directives\n    handler.directives = handler.directives.sort(function (a, b) {\n      return b.level - a.level;\n    });\n    //初始化 directives\n    var boundDirectives = [];\n    utils.each(handler.directives, function (index, directive) {\n      directive.index = index;\n      directive.bind();\n      boundDirectives.push(directive);\n      //如果遇到一个「终态」指令，停止向下初始化\n      //如果 each、if 等为「终态指令」\n      if (directive.final) return handler.final = true;\n    }, this);\n    handler.directives = boundDirectives;\n  },\n\n  /**\n   * 编辑一个元素本身\n   * @param {function} handler 当前模板函数\n   * @param {HTMLNode} node 当前 HTML 结点\n   * @returns {void} 无返回\n   */\n  _compileElement: function (handler, node) {\n    var matchInfo = this._parseMatchInfo(node.nodeName, Directive.TYPE_ELEMENT, node);\n    var elementDirectives = this._findDirectives(matchInfo);\n    elementDirectives.forEach(function (Directive) {\n      handler.directives.push(this._createDirectiveInstance(Directive, {\n        handler: handler,\n        node: node,\n        decorates: matchInfo.decorates\n      }));\n    }, this);\n  },\n\n  /**\n   * 编辑一个元素所有 attributes \n   * @param {function} handler 当前模板函数\n   * @param {HTMLNode} node 当前 HTML 结点\n   * @returns {void} 无返回\n   */\n  _compileAttributes: function (handler, node) {\n    utils.toArray(node.attributes).forEach(function (attribute) {\n      var matchInfo = this._parseMatchInfo(attribute.name, Directive.TYPE_ATTRIBUTE, node);\n      var attributeDirectives = this._findDirectives(matchInfo);\n      attributeDirectives.forEach(function (Directive) {\n        var definition = Directive.definition;\n        handler.directives.push(this._createDirectiveInstance(Directive, {\n          handler: handler,\n          node: node,\n          attribute: attribute,\n          expression: definition.literal ?\n            attribute.value : new Expression(attribute.value),\n          decorates: matchInfo.decorates\n        }));\n      }, this);\n    }, this);\n  },\n\n  /**\n   * 编辑所有子结点\n   * @param {function} handler 当前模板函数\n   * @param {HTMLNode} node 当前 HTML 结点\n   * @returns {void} 无返回\n   */\n  _compileChildren: function (handler, node) {\n    if (handler.final) return;\n    utils.toArray(node.childNodes).forEach(function (childNode) {\n      var childHandler = this.compile(childNode);\n      childHandler.parent = this;\n      handler.children.push(childHandler);\n    }, this);\n  },\n\n  /**\n   * 编译一个模板\n   * @param {HTMLNode} node 模板根元素\n   * @returns {function} 模板函数\n   */\n  compile: function (node) {\n    //定义编译结果函数\n    var handler = function (scope) {\n      if (utils.isNull(scope)) scope = Object.create(null);\n      //执行指令\n      handler.directives.forEach(function (directive) {\n        directive.scope = scope;\n        directive.execute(scope);\n      }, this);\n      //执行子元素编译函数\n      handler.children.forEach(function (childHandler) {\n        childHandler(scope);\n      }, this);\n    };\n    handler.dispose = function () {\n      //执行指令\n      handler.directives.forEach(function (directive) {\n        directive.unbind();\n      }, this);\n      //执行子元素编译函数\n      handler.children.forEach(function (childHandler) {\n        childHandler.dispose();\n      }, this);\n    };\n    //定义 children & directives \n    handler.directives = [];\n    handler.children = [];\n    if (node) {\n      //编辑相关指令\n      this._compileElement(handler, node);\n      this._compileAttributes(handler, node);\n      this._bindHandler(handler);\n      this._compileChildren(handler, node);\n    }\n    //返回编译后函数\n    return handler.bind(null);\n  }\n\n});\n\nmodule.exports = Compiler;",
    "const Class = require('cify');\nconst utils = require('ntils');\nconst Expression = require('./expression');\n\n/**\n * 指令定义信息类\n * 可以通过每一个「指令类」的的「静态成员」访问\n * 也可通过「指令实例」的「实例成员」访问\n */\nconst DirectiveDefinition = new Class({\n\n  _extends: Directive.prototype,\n\n  /**\n   * 构造一个指令定义信息对象\n   * @param {Object} options 选项\n   * @returns {void} 无返回\n   */\n  constructor: function (options) {\n    if (!options ||\n      !utils.isString(options.name) ||\n      options.name.length < 1) {\n      throw new Error('Invalid directive options');\n    }\n    //拷贝所有成员到当前 definition 实例\n    this.customTest = options.test;\n    delete options.test;\n    utils.copy(this._faultHanlde(options), this);\n  },\n\n  /**\n   * 针对「选项」做容错处理\n   * @param {Object} options 原姓选项\n   * @returns {Object} 处理后的选项\n   */\n  _faultHanlde: function (options) {\n    options.type = options.type || Directive.TYPE_ATTRIBUTE;\n    options.level = options.level || Directive.LEVEL_GENERAL;\n    options.match = options.match || options.name;\n    if (!(options.match instanceof RegExp)) {\n      options.match = new RegExp('^' + options.match + '$', 'i');\n    }\n    if (options.tag && !(options.tag instanceof RegExp)) {\n      options.tag = new RegExp('^' + options.tag + '$', 'i');\n    }\n    return options;\n  },\n\n  /**\n   * 检查指令是否匹配\n   * @returns {boolean} 测试结果\n   */\n  test: function (matchInfo) {\n    return (this.type === matchInfo.type) &&\n      (!this.tag || matchInfo.node && this.tag.test(matchInfo.node.nodeName)) &&\n      (this.prefix === false || matchInfo.prefix === matchInfo.compiler.prefix) &&\n      (this.match.test(matchInfo.name)) &&\n      (!this.customTest || this.customTest(matchInfo));\n  }\n\n});\n\n/**\n * 指定定义工场函数\n * @param {Object} defineOpts 选项\n * @returns {Directive} 指令类\n */\nfunction Directive(options) {\n  //创建 definition 实例\n  const definition = new DirectiveDefinition(options);\n  //生成指令类\n  const DirectiveClass = new Class({\n    _extends: definition,\n    //指令构建函数\n    constructor: function (instanceOptions) {\n      utils.copy(instanceOptions, this);\n    },\n    //挂载实例上的 definition\n    definition: definition,\n    //挂载实例核心方法\n    bind: options.bind || utils.noop,\n    execute: options.execute || function (scope) {\n      this.scope = scope;\n      if (this.definition.type === Directive.TYPE_ELEMENT) {\n        return this.update();\n      }\n      var newValue = this.definition.literal ?\n        this.attribute.value : this.expression.execute(scope);\n      if (!utils.deepEqual(this.__value__, newValue)) {\n        this.update(newValue, this.__value__);\n        this.__value__ = newValue;\n      }\n    },\n    update: options.update || utils.noop,\n    unbind: options.unbind || utils.noop,\n    //挂载指令常用的类型\n    utils: utils,\n    Expression: Expression\n  });\n  //向指令类添加「指令定义信息」\n  DirectiveClass.definition = definition;\n  DirectiveClass.__proto__ = definition;\n  return DirectiveClass;\n};\n\n//挂载指令定义信息类\nDirective.Definition = DirectiveDefinition;\n\n//指令类型\nDirective.TYPE_ATTRIBUTE = 'attribute';\nDirective.TYPE_ELEMENT = 'element';\n\n//指令级别\nDirective.LEVEL_ATTRIBUTE = -1000;\nDirective.LEVEL_GENERAL = 0;\nDirective.LEVEL_STATEMENT = 1000;\n\nmodule.exports = Directive;",
    "const Directive = require('../directive');\n\n/**\n * 通用的 attribute 指令\n * 用于所有 attribute 的处理\n * 例如:\n *  <div attr1=\"{{expr1}}\" {{expr2}} {{attr3}}=\"{{expr3}}\">\n *  </div>\n */\nmodule.exports = new Directive({\n  name: 'attr',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  prefix: false,\n  literal: true,\n  match: /[\\s\\S]/i,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.computedName = this.attribute.name;\n    this.computedValue = this.attribute.value;\n    this.nameExpr = new this.Expression(this.attribute.name, true);\n    this.valueExpr = new this.Expression(this.attribute.value, true);\n  },\n\n  execute: function (scope) {\n    var newComputedName = this.nameExpr.execute(scope);\n    if (this.computedName !== newComputedName) {\n      this.node.removeAttribute(this.computedName);\n      this.computedName = newComputedName;\n      if (!this.utils.isNull(this.computedName) && this.computedName.length > 0) {\n        this.node.setAttribute(this.computedName, '');\n      }\n    }\n    var newComputeValue = this.valueExpr.execute(scope);\n    newComputeValue = this.utils.isNull(newComputeValue) ? '' : newComputeValue;\n    if (this.computedValue !== newComputeValue) {\n      this.computedValue = newComputeValue;\n      this.node.setAttribute(\n        this.computedName,\n        this.computedValue\n      );\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'each',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_STATEMENT,\n  final: true,\n  literal: true,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.mountNode = document.createTextNode('');\n    this.node.parentNode.insertBefore(this.mountNode, this.node);\n    this.node.removeAttribute(this.attribute.name);\n    this.node.parentNode.removeChild(this.node);\n    this.parseExpr();\n    this.eachItems = [];\n  },\n\n  parseExpr: function () {\n    this.eachType = this.attribute.value.indexOf(' in ') > -1 ? 'in' : 'of';\n    var tokens = this.attribute.value.split(' ' + this.eachType + ' ');\n    var fnText = 'with(scope){utils.each(' + tokens[1] + ',fn,this)}';\n    this.each = new Function('utils', 'scope', 'fn', fnText).bind(null, this.utils);\n    var names = tokens[0].split(',').map(function (name) {\n      return name.trim();\n    });\n    if (this.eachType == 'in') {\n      this.keyName = names[0];\n      this.valueName = names[1];\n    } else {\n      this.keyName = names[1];\n      this.valueName = names[0];\n    }\n  },\n\n  execute: function (scope) {\n    var eachCount = 0;\n    var itemsFragment = document.createDocumentFragment();\n    this.each(scope, function (key, value) {\n      //创建新 scope\n      var newScope = this.utils.copy(scope);\n      if (this.keyName) newScope[this.keyName] = key;\n      if (this.valueName) newScope[this.valueName] = value;\n      var oldItem = this.eachItems[key];\n      if (oldItem) {\n        if (!oldItem.handler) console.log('a', this.eachItems, oldItem);\n        oldItem.handler(newScope);\n      } else {\n        var newItem = Object.create(null);\n        //创建新元素\n        newItem.node = this.node.cloneNode(true);\n        itemsFragment.appendChild(newItem.node);\n        newItem.handler = this.compiler.compile(newItem.node);\n        newItem.handler(newScope);\n        this.eachItems[key] = newItem;\n      }\n      eachCount++;\n    }.bind(this));\n    this.eachItems.splice(eachCount).forEach(function (item) {\n      item.node.parentNode.removeChild(item.node);\n    });\n    if (itemsFragment.childNodes.length > 0) {\n      this.mountNode.parentNode.insertBefore(itemsFragment, this.mountNode);\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'if',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_STATEMENT,\n  final: true,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.mountNode = document.createTextNode('');\n    this.node.parentNode.insertBefore(this.mountNode, this.node);\n    this.node.removeAttribute(this.attribute.name);\n    this.node.parentNode.removeChild(this.node);\n    this._oldValue = false;\n    this._handler = this.compiler.compile(this.node);\n  },\n\n  execute: function (scope) {\n    var newValue = this.expression.execute(scope);\n    if (newValue) {\n      //如果新计算的结果为 true 才执行 \n      this._handler(scope);\n      if (!this._oldValue) {\n        this.mountNode.parentNode.insertBefore(this.node, this.mountNode);\n      }\n    } else if (this._oldValue) {\n      this.node.parentNode.removeChild(this.node);\n    }\n    this._oldValue = newValue;\n  }\n\n});",
    "module.exports = [\n  require('./text'),\n  require('./attr'),\n  require('./each'),\n  require('./if'),\n  require('./prop'),\n  require('./on'),\n  require('./inner-html'),\n  require('./inner-text'),\n  require('./model-input'),\n  require('./model-select'),\n  require('./model-radio'),\n  require('./model-checkbox'),\n  require('./model-editable')\n];",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'html',\n  type: Directive.TYPE_ATTRIBUTE,\n\n  update: function (newValue) {\n    this.node.innerHTML = newValue;\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'text',\n  type: Directive.TYPE_ATTRIBUTE,\n\n  update: function (newValue) {\n    this.node.innerText = newValue;\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'model',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  tag: 'input',\n\n  test: function (matchInfo) {\n    var inputType = matchInfo.node.getAttribute('type');\n    return inputType === 'checkbox';\n  },\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.bindPath = this.attribute.value;\n    this.node.addEventListener('change', function () {\n      if (this.utils.isNull(this.scope)) return;\n      var value = this.utils.getByPath(this.scope, this.bindPath);\n      if (this.utils.isArray(value) && this.node.checked) {\n        value.push(this.node.value);\n      } else if (this.utils.isArray(value) && !this.node.checked) {\n        var index = value.indexOf(this.node.value);\n        value.splice(index, 1);\n      } else {\n        this.utils.setByPath(this.scope, this.bindPath, this.node.checked);\n      }\n    }.bind(this), false);\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    var value = this.expression.execute(scope);\n    if (this.utils.isArray(value)) {\n      this.node.checked = value.indexOf(this.node.value) > -1;\n    } else {\n      this.node.checked = value;\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'model',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  test: function (matchInfo) {\n    return matchInfo.node.isContentEditable;\n  },\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.bindPath = this.attribute.value;\n    this.node.addEventListener('input', function () {\n      if (this.utils.isNull(this.scope)) return;\n      this.utils.setByPath(this.scope, this.bindPath, this.node.innerHTML);\n    }.bind(this), false);\n  },\n\n  execute: function (scope) {\n    var value = this.expression.execute(scope);\n    if (this.node.innerHTML !== value) {\n      this.node.innerHTML = value;\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'model',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  tag: /^(input|textarea)$/i,\n  test: function (matchInfo) {\n    var inputType = matchInfo.node.getAttribute('type');\n    return inputType !== 'radio' && inputType !== 'checkbox';\n  },\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.bindPath = this.attribute.value;\n    this.node.addEventListener('input', function () {\n      if (this.utils.isNull(this.scope)) return;\n      this.utils.setByPath(this.scope, this.bindPath, this.node.value);\n    }.bind(this), false);\n  },\n\n  execute: function (scope) {\n    var value = this.expression.execute(scope);\n    if (this.node.value !== value) {\n      this.node.value = value;\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'model',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  tag: 'input',\n  test: function (matchInfo) {\n    var inputType = matchInfo.node.getAttribute('type');\n    return inputType === 'radio';\n  },\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.bindPath = this.attribute.value;\n    this.node.addEventListener('change', function () {\n      if (this.utils.isNull(this.scope)) return;\n      this.utils.setByPath(this.scope, this.bindPath, this.node.value);\n    }.bind(this), false);\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    var value = this.expression.execute(scope);\n    this.node.checked = value == this.node.value;\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'model',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  final: true,\n  tag: 'select',\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.bindPath = this.attribute.value;\n    this.node.removeAttribute(this.attribute.name);\n    this._handler = this.compiler.compile(this.node);\n    this.node.addEventListener('change', function () {\n      if (this.utils.isNull(this.scope)) return;\n      var selectedOptions = this.node.selectedOptions;\n      var value = this.node.multiple\n        ? [].slice.call(selectedOptions).map(function (option) {\n          return option.value;\n        }, this)\n        : selectedOptions[0].value;\n      this.utils.setByPath(this.scope, this.bindPath, value);\n    }.bind(this), false);\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    this._handler(scope);\n    var value = this.expression.execute(scope);\n    if (!this.utils.isArray(value)) value = [value];\n    [].slice.call(this.node.options).forEach(function (option) {\n      option.selected = value.indexOf(option.value) > -1;\n    }, this);\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'on',\n  type: Directive.TYPE_ATTRIBUTE,\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.node.addEventListener(this.decorates[0], function (event) {\n      if (this.utils.isNull(this.scope)) return;\n      var scope = this.utils.copy(this.scope);\n      scope.event = scope.$event = event;\n      this.expression.execute(scope);\n    }.bind(this), false);\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'prop',\n  type: Directive.TYPE_ATTRIBUTE,\n\n  update: function (newValue) {\n    this.node[this.decorates[0]] = newValue;\n  }\n\n});",
    "const Directive = require('../directive');\nconst Expression = require('../expression');\n\nconst CLOAK_CLASS_NAME = 'cloak';\n\nmodule.exports = new Directive({\n  name: '#text',\n  type: Directive.TYPE_ELEMENT,\n  prefix: false,\n  test: function (matchInfo) {\n    return matchInfo.node.nodeValue.trim().length > 4;\n  },\n\n  /**\n   * 初始化指令\n   * @returns {void} 无返回\n   */\n  bind: function () {\n    this.expr = new Expression(this.node.nodeValue, true);\n    this.node.nodeValue = '';\n    if (this.node.parentNode) {\n      this.node.parentNode.removeAttribute(CLOAK_CLASS_NAME);\n    }\n  },\n\n  execute: function (scope) {\n    this.scope = scope;\n    var newValue = this.expr.execute(scope);\n    if (this.node.nodeValue !== newValue) {\n      this.node.nodeValue = newValue;\n    }\n  }\n\n});",
    "const Class = require('cify');\nconst utils = require('ntils');\n\n/**\n * 表达式类型，将字符串构析为可执行表达式实例\n */\nconst Expression = new Class({\n\n  /**\n   * 通过字符串构造一个表达式实例\n   * @param {string} code 代码字符串\n   * @param {boolean} mix 是否是混合代码\n   * @returns {void} 无返回\n   */\n  constructor: function (code, mix) {\n    this.func = mix ?\n      this._compileMixedCode(code) :\n      this._compileCode(code);\n  },\n\n  /**\n   * 编译普通表达式代码\n   * @param {string} code 代码字符串\n   * @returns {function} 编辑后的函数\n   */\n  _compileCode: function (code) {\n    code = this._escapeEOL(this._wrapCode(code));\n    return this._createFunction(code);\n  },\n\n  /**\n   * 编辑混合的表达式代码\n   * @param {string} code 代码字符串\n   * @returns {function} 编辑后的函数\n   */\n  _compileMixedCode: function (code) {\n    var statements = this._parseMixedCode(code);\n    code = this._escapeEOL(statements.join('+'));\n    return this._createFunction(code);\n  },\n\n  /**\n   * 通过符串代码创建一个可执行函数\n   * @param {string} code 代码字符串\n   * @returns {function} 创建的函数\n   */\n  _createFunction: function (code) {\n    var func = new Function('utils', 'scope', 'with(scope){return ' + code + '}');\n    return func.bind(null, utils);\n  },\n\n  /**\n   * 解析混合代码字符串\n   * @param {string} code 混合代码字符串\n   * @returns {Array} 解析后的「token」列表\n   */\n  _parseMixedCode: function (code) {\n    var index = 0, length = code.length;\n    var token = '', isExpr = false, tokens = [];\n    while (index <= length) {\n      var char = code[index++];\n      var nextChar = code[index];\n      if (utils.isNull(char)) {\n        if (token.length > 0) {\n          tokens.push('\"' + this._escapeCode(token) + '\"');\n        }\n        token = '';\n        isExpr = false;\n      } else if (!isExpr && char + nextChar == '{{') {\n        if (token.length > 0) {\n          tokens.push('\"' + this._escapeCode(token) + '\"');\n        }\n        token = '';\n        isExpr = true;\n        index++;\n      } else if (isExpr && char + nextChar == '}}') {\n        if (token.length > 0) {\n          tokens.push(this._wrapCode(token));\n        }\n        token = '';\n        isExpr = false;\n        index++;\n      } else {\n        token += char;\n      }\n    }\n    return tokens;\n  },\n\n  /**\n   * 转义处理代码字符串\n   * @param {string} str 源字符串\n   * @returns {string} 处理后的字符串\n   */\n  _escapeCode: function (str) {\n    return str.replace(/\"/, '\\\\\"').replace('\\r\\n', '\\\\r\\\\n').replace('\\n', '\\\\n');\n  },\n\n  /**\n   * 转义换行符\n   * @param {string} str 源字符串\n   * @returns {string} 处理后的字符串\n   */\n  _escapeEOL: function (code) {\n    return code.replace(/\\n/gm, '\\\\\\n');\n  },\n\n  /**\n   * 通过闭包和 try/cache 包裹代码\n   * 将模板中错误的代码直接显示在「模板中用到的位置」，更易于定位错误。\n   * @param {string} str 源字符串\n   * @returns {string} 处理后的字符串\n   */\n  _wrapCode: function (code) {\n    return '((function(){try{return (' + code + ')}catch(err){return err;}})())';\n  },\n\n  /**\n   * 通过 scope 对象执行表达式\n   * @param {Object} scope 上下文对象\n   * @returns {Object} 执行结果\n   */\n  execute: function (scope) {\n    if (utils.isNull(scope)) {\n      scope = Object.create(null);\n    }\n    return this.func.call(scope, scope);\n  }\n\n});\n\nmodule.exports = Expression;",
    "const Compiler = require('./compiler');\nconst Directive = require('./directive');\nconst Expression = require('./expression');\nconst Observer = require('./observer');\nconst Template = require('./template');\nconst directives = require('./directives/');\nconst utils = require('ntils');\n\nTemplate.Template = Template;\nTemplate.Compiler = Compiler;\nTemplate.Directive = Directive;\nTemplate.directives = directives;\nTemplate.Expression = Expression;\nTemplate.Observer = Observer;\nTemplate.utils = utils;\n\nmodule.exports = Template;",
    "const Class = require('cify');\nconst utils = require('ntils');\nconst EventEmitter = require('events');\n\nconst OBSERVER_PROP_NAME = '__observer__';\nconst CHANGE_EVENT_NAME = 'change';\nconst EVENT_MAX_DISPATCH_LAYER = 20;\n\n/**\n * 对象观察类，可以监控对象变化\n * 目前方案问题:\n *   对于父子关系和事件冒泡，目前方案如果用 delete 删除一个属性，无关真实删除关系，\n *   即便调用 clearReference 也无法再清除关系，子对象的 parents 中会一直有一个引用，当前方案最高效\n * 其它方法一:\n *   将「关系」放入全局数组中，然后将 ob.parents 变成一个「属性」从全局数组件中 filter 出来，\n *   基本和目前方法类似，但是关系在外部存领教，所以 clearReference 可清除。\n * 其它方案二: \n *   构造时添加到全局数组，每一个 observer change 时都让放到全局的 observer 遍历自身的，\n *   检果事件源是不是自已的子对象，如果是则触发自身 change 事件，这样 ob 对象本身没有相关引用\n *   clearReference 时只从全局清除掉就行了，并且 delete 操作也不会影响，但效率稍差。\n * 其它方案三: \n *   给构造函数添加一个 deep 属性，只有 deep 的 ob 对象，才放入到全局数组中，检查时逻辑同方案二\n *   但是因为要检查的对象会少很多，效率会更高一点。\n */\nconst Observer = new Class({\n  _extends: EventEmitter,\n\n  /**\n   * 通过目标对象构造一个观察对象\n   * @param {Object} target 目标对象\n   * @returns {void} 无返回\n   */\n  constructor: function (target) {\n    if (utils.isNull(target)) {\n      throw new Error('Invalid target');\n    }\n    var observer = target[OBSERVER_PROP_NAME];\n    if (observer) {\n      observer.apply();\n      return observer;\n    }\n    utils.defineFreezeProp(this, 'shadow', Object.create(null));\n    utils.defineFreezeProp(this, 'target', target);\n    utils.defineFreezeProp(this, 'parents', []);\n    utils.defineFreezeProp(target, OBSERVER_PROP_NAME, this);\n    this.apply();\n  },\n\n  /**\n   * 添加一个属性，动态添中的属性，无法被观察，\n   * 但是通过 set 方法添加的属性可能被观察。\n   */\n  set: function (name, value) {\n    if (utils.isFunction(value)) return;\n    Object.defineProperty(this.target, name, {\n      get: function () {\n        return this[OBSERVER_PROP_NAME].shadow[name];\n      },\n      set: function (value) {\n        var observer = this[OBSERVER_PROP_NAME];\n        var oldValue = observer.shadow[name];\n        if (oldValue === value) return;\n        if (utils.isObject(value)) {\n          var childObserver = new Observer(value, name);\n          observer.addChild(childObserver, name);\n        }\n        //移除旧值的父引用\n        //如果用 delete 删除属性将无法移除父子引用\n        if (oldValue && oldValue[OBSERVER_PROP_NAME]) {\n          observer.removeChild(oldValue[OBSERVER_PROP_NAME], name);\n        }\n        observer.shadow[name] = value;\n        observer._emitChange({ path: name, value: value });\n      },\n      configurable: true,\n      enumerable: true\n    });\n    this.target[name] = value;\n  },\n\n  /**\n   * 自动应用所有动态添加的属性\n   * @returns {void} 无返回\n   */\n  apply: function () {\n    if (utils.isArray(this.target)) {\n      this._wrapArray(this.target);\n    }\n    var names = this._getPropertyNames(this.target);\n    names.forEach(function (name) {\n      var desc = Object.getOwnPropertyDescriptor(this.target, name);\n      if (!('value' in desc)) return;\n      this.set(name, this.target[name]);\n    }, this);\n  },\n\n  /**\n   * 清除所有父子引用\n   * @returns {void} 无返回\n   */\n  clearReference: function () {\n    utils.each(this.target, function (name, value) {\n      if (utils.isNull(value)) return;\n      var child = value[OBSERVER_PROP_NAME];\n      if (child) this.removeChild(child);\n    }, this);\n  },\n\n  /**\n   * 派发一个事件，事件会向父级对象冒泡\n   * @param {string} eventName 事件名称\n   * @param {Object} event 事件对象\n   * @returns {void} 无返回\n   */\n  dispatch: function (eventName, event) {\n    event.__layer__ = event.__layer__ || 0;\n    event.__layer__++;\n    if (event.__layer__ >= EVENT_MAX_DISPATCH_LAYER) return;\n    this.emit(eventName, event);\n    if (!this.parents || this.parents.length < 1) return;\n    this.parents.forEach(function (item) {\n      if (!(item.name in item.parent.target)) {\n        return item.parent.removeChild(this);\n      }\n      var parentEvent = utils.copy(event);\n      parentEvent.path = item.name + '.' + event.path;\n      item.parent.dispatch(eventName, parentEvent);\n    }, this);\n  },\n\n  /**\n   * 添子观察者对象\n   * @param {Object} child 父对象\n   * @param {String} name 属性名\n   * @returns {void} 无返回\n   */\n  addChild: function (child, name) {\n    if (utils.isNull(child) || utils.isNull(name)) {\n      throw new Error('Invalid paramaters');\n    }\n    child.parents.push({ parent: this, name: name });\n  },\n\n  /**\n   * 移除子对象\n   * @param {Object} child 父对象\n   * @param {String} name 属性名\n   * @returns {void} 无返回\n   */\n  removeChild: function (child, name) {\n    if (utils.isNull(child)) {\n      throw new Error('Invalid paramaters');\n    }\n    var foundIndex = -1;\n    child.parents.forEach(function (item, index) {\n      if (item.parent === this && item.name === name) {\n        foundIndex = index;\n      }\n    }, this);\n    if (foundIndex > -1) {\n      child.parents.splice(foundIndex, 1);\n    }\n  },\n\n  /**\n   * 触发 change 事件\n   * @param {Object} event 事件对象\n   * @returns {void} 无返回\n   */\n  _emitChange: function (event) {\n    this.dispatch(CHANGE_EVENT_NAME, event);\n  },\n\n  /**\n   * 获取所有成员名称列表\n   * @returns {Array} 所有成员名称列表\n   */\n  _getPropertyNames: function () {\n    var names = utils.isArray(this.target) ?\n      this.target.map(function (item, index) {\n        return index;\n      }) : Object.keys(this.target);\n    return names.filter(function (name) {\n      return name !== OBSERVER_PROP_NAME;\n    });\n  },\n\n  /**\n   * 包裹数组\n   * @param {array} array 源数组\n   * @returns {array} 处理后的数组\n   */\n  _wrapArray: function (array) {\n    utils.defineFreezeProp(array, 'push', function () {\n      var items = [].slice.call(arguments);\n      items.forEach(function (item) {\n        //这里也会触发对应 index 的 change 事件\n        this[OBSERVER_PROP_NAME].set(array.length, item);\n      }, this);\n      this[OBSERVER_PROP_NAME]._emitChange({ path: 'length', value: this.length });\n    });\n    utils.defineFreezeProp(array, 'pop', function () {\n      var item = [].pop.apply(this, arguments);\n      this[OBSERVER_PROP_NAME]._emitChange({ path: this.length, value: item });\n      this[OBSERVER_PROP_NAME]._emitChange({ path: 'length', value: this.length });\n      return item;\n    });\n    utils.defineFreezeProp(array, 'unshift', function () {\n      var items = [].slice.call(arguments);\n      items.forEach(function (item) {\n        //这里也会触发对应 index 的 change 事件\n        this[OBSERVER_PROP_NAME].set(0, item);\n      }, this);\n      this[OBSERVER_PROP_NAME]._emitChange({ path: 'length', value: this.length });\n    });\n    utils.defineFreezeProp(array, 'shift', function () {\n      var item = [].shift.apply(this, arguments);\n      this[OBSERVER_PROP_NAME]._emitChange({ path: 0, value: item });\n      this[OBSERVER_PROP_NAME]._emitChange({ path: 'length', value: this.length });\n      return item;\n    });\n    utils.defineFreezeProp(array, 'splice', function () {\n      var startIndex = arguments[0];\n      var endIndex = utils.isNull(arguments[1])\n        ? startIndex + arguments[1]\n        : this.length - 1;\n      var items = [].splice.apply(this, arguments);\n      for (var i = startIndex; i <= endIndex; i++) {\n        this[OBSERVER_PROP_NAME]._emitChange({ path: i, value: items[i - startIndex] });\n      };\n      this[OBSERVER_PROP_NAME]._emitChange({ path: 'length', value: this.length });\n      return items;\n    });\n    utils.defineFreezeProp(array, 'set', function (index, value) {\n      if (index >= this.length) {\n        this[OBSERVER_PROP_NAME]._emitChange({ path: 'length', value: this.length });\n      }\n      this[OBSERVER_PROP_NAME].set(index, value);\n    });\n  }\n\n});\n\n/**\n * 观察一个对象\n * @param {Object} target 目标对象\n * @return {Observer} 观察者对象\n */\nObserver.observe = function (target) {\n  return new Observer(target);\n};\n\nmodule.exports = Observer;",
    "const Class = require('cify');\nconst Observer = require('./observer');\nconst EventEmitter = require('events');\nconst Compiler = require('./compiler');\n\n/**\n * 模板类\n * 可能通过 element 作为参数，创建一个模板实例\n */\nconst Template = new Class({\n  _extends: EventEmitter,\n\n  /**\n   * 构建一个模板板实例\n   * @param {HTMLNode} element HTML 元素\n   * @param {Object} options 选项\n   * @returns void 无返回\n   */\n  constructor: function (element, options) {\n    options = options || Object.create(null);\n    this.element = element;\n    this.compiler = options.compiler || new Compiler(options);\n    this.render = this.compiler.compile(this.element);\n    this.update = this.update.bind(this);\n    this._update = this._update.bind(this);\n    this._updateTimer = 0;\n  },\n\n  /**\n   * 更新当前模板 (会过滤不必要的更新)\n   * @returns {void} 无返回\n   */\n  update: function () {\n    if (this._updateTimer) {\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null;\n    }\n    this._updateTimer = setTimeout(this._update, 0);\n  },\n\n  /**\n   * 更新当前模板内部方法 \n   * @returns {void} 无返回\n   */\n  _update: function () {\n    if (!this._updateTimer || !this.observer) return;\n    this.emit('update', this);\n    this.render(this.observer.target);\n  },\n\n  /**\n   * 将模板绑定到一个 scope\n   * @param {Object} scope 绑定的上下文对象\n   * @param {boolean} disableFirst 是否禁用第一次的自动渲染\n   * @returns {void} 无返回\n   */\n  bind: function (scope, disableFirst) {\n    this.unbind();\n    this.observer = new Observer(scope);\n    this.observer.on('change', this.update);\n    if (!disableFirst) this.update();\n  },\n\n  /**\n   * 解绑定\n   * @returns {void} 无返回\n   */\n  unbind: function () {\n    if (!this.observer) return;\n    this.observer.removeListener('change', this.update);\n    this.observer.clearReference();\n    this.observer = null;\n  },\n\n  /**\n   * 释放\n   * @returns {void} 无返回\n   */\n  dispose: function () {\n    this.unbind();\n    this.render.dispose();\n  }\n\n});\n\nmodule.exports = Template;",
    "const Class = require('cify');\nconst utils = require('ntils');\n\n/**\n * Watcher 类\n * 通过「计算函数」、「执行函数」可以创建一个 Watcher 实例\n */\nconst Watcher = new Class({\n\n  /**\n   * 通过「计算函数」、「执行函数」构建一个 Watcher 实例\n   * @param {function} calcor 计算函数\n   * @param {function} handler 处理函数\n   * @param {boolean} first 是否自动执行第一次\n   * @param {void} 无返回\n   */\n  constructor: function (calcor, handler, first) {\n    if (!utils.isFunction(calcor) || !utils.isFunction(handler)) {\n      throw new Error('Invalid parameters');\n    }\n    this.calcor = calcor;\n    this.handler = handler;\n    if (first) this.calc(true);\n  },\n\n  /**\n   * 执行计算\n   * @param {boolean} force 是否强制触发「计算函数」\n   * @returns {Object} 计算后的值\n   */\n  calc: function (force) {\n    var newValue = this.calcor();\n    if (force || !utils.deepEqual(newValue, this.value)) {\n      this.handler(newValue, this.value);\n    }\n    this.value = newValue;\n  }\n\n});\n\nmodule.exports = Watcher;",
    "; (function () {\n  var createInstance = (function () {\n    var fnBody = ['switch(args.length){']\n    for (var i = 20; i > 0; i--) {\n      var fnArgs = []\n      for (var j = 0; j < i; j++) fnArgs.push('args[' + j + ']')\n      fnBody.push('case ' + i + ':return new Fn(' + fnArgs.join(',') + ');')\n    }\n    fnBody.push('case 0:default:return new Fn();}')\n    return new Function('Fn', 'args', fnBody.join(''))\n  })()\n\n  function getPropertyNames(obj) {\n    var nameList = Object.getOwnPropertyNames(obj)\n    if (obj.__proto__) {\n      nameList.push.apply(nameList, getPropertyNames(obj.__proto__))\n    }\n    return nameList\n  }\n\n  function isChildClass(_child, _super) {\n    if (_child.__proto__ == _super.prototype) {\n      return true\n    } else if (_child.prototype) {\n      return isChildClass(_child.prototype, _super)\n    } else {\n      return false\n    }\n  }\n\n  function createSuper(_self, proto) {\n    var _super = function () {\n      if (proto.constructor) {\n        proto.constructor.apply(_self, arguments)\n      }\n    }\n    delete _super.name\n    var nameList = getPropertyNames(proto)\n    nameList.forEach(function (name) {\n      if (name == '_super' ||\n        name == '_extends' ||\n        name == '_static' ||\n        name == 'constructor') {\n        return\n      }\n      if (typeof proto[name] === 'function') {\n        _super[name] = _super[name] || proto[name].bind(_self)\n      } else {\n        _super[name] = _super[name] || proto[name]\n      }\n    })\n    _super.__proto__ = {}\n    return _super\n  }\n\n  function defineClass(def) {\n    var classProto = ((typeof def === 'function') ? def() : def) || {}\n    var classExtends = classProto._extends\n    var clsssStatic = classProto._static || {}\n    if (typeof classExtends === 'function') {\n      classProto.__proto__ = classExtends.prototype\n      clsssStatic.__proto__ = classExtends\n    } else if (classExtends) {\n      classProto.__proto__ = classExtends\n    } else {\n      classProto.__proto__ = {}\n    }\n    classProto.__defineGetter__('_super', function () {\n      this.__super__ = this.__super__ || createSuper(this, classProto.__proto__)\n      return this.__super__\n    })\n    Class.prototype = classProto\n    Class.__proto__ = clsssStatic\n    function Class() {\n      var instance = this\n      if (typeof classExtends === 'function') {\n        instance = createInstance(classExtends, arguments)\n      }\n      instance.constructor = Class\n      instance._static = instance.Class = Class\n      instance.__proto__ = Class.prototype\n      var constructor = instance.__proto__.constructor\n      if (constructor != null &&\n        constructor != Object) {\n        var rs = constructor.apply(instance, arguments)\n        instance = rs && classProto.hasOwnProperty('constructor') ? rs : instance\n      }\n      instance.__proto__ = Class.prototype\n      delete instance._extends\n      return instance\n    }\n    Class.extendsOf = function (_super) {\n      return isChildClass(this, _super)\n    };\n    Class.superOf = function (_child) {\n      return isChildClass(_child, this)\n    };\n    return Class\n  }\n\n  defineClass.prototype.__proto__ = Function.prototype\n  defineClass.Class = defineClass\n\n  if (typeof module != 'undefined') {\n    module.exports = defineClass\n  }\n\n  if (typeof define == 'function' && define.amd) {\n    define('cify', [], function () {\n      return defineClass\n    })\n  }\n\n  if (typeof window != 'undefined') {\n    window.cify = window.Class = defineClass\n  }\n})()\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n",
    "(function (owner) {\n  \"use strict\";\n\n  /**\n   * 空函数\n   */\n  owner.noop = function () { };\n\n  /**\n   * 验证一个对象是否为NULL\n   * @method isNull\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isNull = function (obj) {\n    return obj === null || typeof obj === \"undefined\";\n  };\n\n  /**\n   * 除去字符串两端的空格\n   * @method trim\n   * @param  {String} str 源字符串\n   * @return {String}     结果字符串\n   * @static\n   */\n  owner.trim = function (str) {\n    if (this.isNull(str)) return str;\n    if (str.trim) {\n      return str.trim();\n    } else {\n      return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n    }\n  };\n\n  /**\n   * 替换所有\n   * @method replace\n   * @param {String} str 源字符串\n   * @param {String} str1 要替换的字符串\n   * @param {String} str2 替换为的字符串\n   * @static\n   */\n  owner.replace = function (str, str1, str2) {\n    if (this.isNull(str)) return str;\n    return str.replace(new RegExp(str1, 'g'), str2);\n  };\n\n  /**\n   * 从字符串开头匹配\n   * @method startWith\n   * @param {String} str1 源字符串\n   * @param {String} str2 要匹配的字符串\n   * @return {Boolean} 匹配结果\n   * @static\n   */\n  owner.startWith = function (str1, str2) {\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) === 0;\n  };\n\n  /**\n   * 是否包含\n   * @method contains\n   * @param {String} str1 源字符串\n   * @param {String} str2 检查包括字符串\n   * @return {Boolean} 结果\n   * @static\n   */\n  owner.contains = function (str1, str2) {\n    var self = this;\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    if (self.isArray(str1)) {\n      return self.each(str1, function (i, str) {\n        if (str == str2) return true;\n      });\n    } else {\n      return str1 && str2 && str1.indexOf(str2) > -1;\n    }\n  };\n\n  /**\n   * 从字符串结束匹配\n   * @method endWidth\n   * @param {String} str1 源字符串\n   * @param {String} str2 匹配字符串\n   * @return {Boolean} 匹配结果\n   * @static\n   */\n  owner.endWith = function (str1, str2) {\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) === (str1.length - str2.length);\n  };\n\n  /**\n   * 是否包含属性\n   * @method hasProperty\n   * @param  {Object}  obj  对象\n   * @param  {String}  name 属性名\n   * @return {Boolean}      结果\n   * @static\n   */\n  owner.has = owner.hasProperty = function (obj, name) {\n    if (this.isNull(obj) || this.isNull(name)) return false;\n    return (name in obj) || (obj.hasOwnProperty(name));\n  };\n\n  /**\n   * 验证一个对象是否为Function\n   * @method isFunction\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isFunction = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === \"function\";\n  };\n\n  /**\n   * 验证一个对象是否为String\n   * @method isString\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isString = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'string' || obj instanceof String;\n  };\n\n  /**\n   * 验证一个对象是否为Number\n   * @method isNumber\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isNumber = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'number' || obj instanceof Number;\n  };\n\n  /**\n   * 验证一个对象是否为Boolean\n   * @method isBoolean\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isBoolean = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'boolean' || obj instanceof Boolean;\n  };\n\n  /**\n   * 验证一个对象是否为HTML Element\n   * @method isElement\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isElement = function (obj) {\n    if (this.isNull(obj)) return false;\n    if (window.Element) return obj instanceof Element;\n    else return (obj.tagName && obj.nodeType && obj.nodeName && obj.attributes && obj.ownerDocument);\n  };\n\n  /**\n   * 验证一个对象是否为HTML Text Element\n   * @method isText\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isText = function (obj) {\n    if (this.isNull(obj)) return false;\n    return obj instanceof Text;\n  };\n\n  /**\n   * 验证一个对象是否为Object\n   * @method isObject\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isObject = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === \"object\";\n  };\n\n  /**\n   * 验证一个对象是否为Array或伪Array\n   * @method isArray\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isArray = function (obj) {\n    if (this.isNull(obj)) return false;\n    var v1 = Object.prototype.toString.call(obj) === '[object Array]';\n    var v2 = obj instanceof Array;\n    var v3 = !this.isString(obj) && this.isNumber(obj.length) && this.isFunction(obj.splice);\n    var v4 = !this.isString(obj) && this.isNumber(obj.length) && obj[0];\n    return v1 || v2 || v3 || v4;\n  };\n\n  /**\n   * 验证是不是一个日期对象\n   * @method isDate\n   * @param {Object} val   要检查的对象\n   * @return {Boolean}           结果\n   * @static\n   */\n  owner.isDate = function (val) {\n    if (this.isNull(val)) return false;\n    return val instanceof Date;\n  };\n\n  /**\n   * 转换为数组\n   * @method toArray\n   * @param {Array|Object} array 伪数组\n   * @return {Array} 转换结果数组\n   * @static\n   */\n  owner.toArray = function (array) {\n    if (this.isNull(array)) return [];\n    return Array.prototype.slice.call(array);\n  };\n\n  /**\n   * 转为日期格式\n   * @method toDate\n   * @param {Number|String} val 日期字符串或整型数值\n   * @return {Date} 日期对象\n   * @static\n   */\n  owner.toDate = function (val) {\n    var self = this;\n    if (self.isNumber(val))\n      return new Date(val);\n    else if (self.isString(val))\n      return new Date(self.replace(self.replace(val, '-', '/'), 'T', ' '));\n    else if (self.isDate(val))\n      return val;\n    else\n      return null;\n  };\n\n  /**\n   * 遍历一个对像或数组\n   * @method each\n   * @param  {Object or Array}   obj  要遍历的数组或对象\n   * @param  {Function} fn            处理函数\n   * @return {void}                   无返回值\n   * @static\n   */\n  owner.each = function (list, handler, scope) {\n    if (this.isNull(list) || this.isNull(handler)) return;\n    if (this.isArray(list)) {\n      var listLength = list.length;\n      for (var i = 0; i < listLength; i++) {\n        var rs = handler.call(scope || list[i], i, list[i]);\n        if (!this.isNull(rs)) return rs;\n      }\n    } else {\n      for (var key in list) {\n        var rs = handler.call(scope || list[key], key, list[key]);\n        if (!this.isNull(rs)) return rs;\n      }\n    }\n  };\n\n  /**\n   * 格式化日期\n   * @method formatDate\n   * @param {Date|String|Number} date 日期\n   * @param {String} format 格式化字符串\n   * @return {String} 格式化结果\n   * @static\n   */\n  owner.formatDate = function (date, format) {\n    if (this.isNull(format) || this.isNull(date)) return date;\n    date = this.toDate(date);\n    var placeholder = {\n      \"M+\": date.getMonth() + 1, //month\n      \"d+\": date.getDate(), //day\n      \"h+\": date.getHours(), //hour\n      \"m+\": date.getMinutes(), //minute\n      \"s+\": date.getSeconds(), //second\n      \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n      \"S\": date.getMilliseconds() //millisecond\n    }\n    if (/(y+)/.test(format)) {\n      format = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (var key in placeholder) {\n      if (new RegExp(\"(\" + key + \")\").test(format)) {\n        format = format.replace(\n          RegExp.$1,\n          RegExp.$1.length == 1 ?\n            placeholder[key] : (\"00\" + placeholder[key]).substr((\"\" + placeholder[key]).length)\n        );\n      }\n    }\n    return format;\n  };\n\n  /**\n   * 深度克隆对象\n   * @method clone\n   * @param {Object} obj 源对象\n   * @return {Object} 新对象\n   * @static\n   */\n  owner.clone = function (obj, igonreArray) {\n    if (this.isNull(obj) || this.isString(obj) || this.isNumber(obj) || this.isBoolean(obj) || this.isDate(obj)) {\n      return obj;\n    }\n    var objClone = obj;\n    try {\n      objClone = new obj.constructor();\n    } catch (ex) { }\n    for (var key in obj) {\n      if (objClone[key] != obj[key] && !this.contains(igonreArray, key)) {\n        if (typeof (obj[key]) === 'object') {\n          objClone[key] = this.clone(obj[key], igonreArray);\n        } else {\n          objClone[key] = obj[key];\n        }\n      }\n    }\n    this.each(['toString', 'valueOf'], function (i, name) {\n      if (this.contains(igonreArray, key)) return;\n      objClone[name] = obj[name];\n    }, this);\n    return objClone;\n  };\n\n  /**\n   * 拷贝对象\n   * @method copy\n   * @param {Object} obj1 源对象\n   * @param {Object} obj2 目标对象\n   * @static\n   */\n  owner.copy = function (obj1, obj2) {\n    obj2 = obj2 || {};\n    this.each(obj1, function (name) {\n      try {\n        obj2[name] = obj1[name];\n      } catch (ex) { }\n    })\n    return obj2;\n  };\n\n  /**\n   * 定义不可遍历的属性\n   **/\n  owner.defineFreezeProp = function (obj, name, value) {\n    Object.defineProperty(obj, name, {\n      value: value,\n      enumerable: false,\n      configurable: true, //能不能重写定义\n      writable: false //能不能用「赋值」运算更改\n    });\n  };\n\n  /**\n   * 获取所有 key \n   */\n  owner.keys = function (obj) {\n    if (Object.keys) return Object.keys(obj);\n    var keys = [];\n    this.each(obj, function (key) {\n      keys.push(key);\n    });\n    return keys;\n  };\n\n  /**\n   * 创建一个对象\n   */\n  owner.create = function (proto) {\n    if (Object.create) return Object.create(proto);\n    return { __proto__: proto };\n  };\n\n  /**\n   * 是否深度相等\n   */\n  owner.deepEqual = function (a, b) {\n    if (a === b) return true;\n    if (!this.isObject(a) || !this.isObject(b)) return false;\n    var aKeys = this.keys(a);\n    var bKeys = this.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n    var allKeys = aKeys.concat(bKeys);\n    var checkedMap = this.create(null);\n    var result = true;\n    this.each(allKeys, function (i, key) {\n      if (checkedMap[key]) return;\n      if (!this.deepEqual(a[key], b[key])) result = false;\n      checkedMap[key] = true;\n    }, this);\n    return result;\n  };\n\n  /**\n   * 从一个数值循环到别一个数\n   * @param {number} fromNum 开始数值\n   * @param {Number} toNum 结束数值\n   * @param {Number} step 步长值\n   * @param {function} handler 执行函数\n   * @returns {void} 无返回\n   */\n  owner.fromTo = function (fromNum, toNum, step, handler) {\n    if (!handler) handler = [step, step = handler][0];\n    step = Math.abs(step || 1);\n    if (fromNum < toNum) {\n      for (var i = fromNum; i <= toNum; i += step) handler(i);\n    } else {\n      for (var i = fromNum; i >= toNum; i -= step) handler(i);\n    }\n  };\n\n  /**\n   * 生成一个Guid\n   * @method newGuid\n   * @return {String} GUID字符串\n   * @static\n   */\n  owner.newGuid = function () {\n    var S4 = function () {\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n  };\n\n  /**\n   * 对象变换\n   **/\n  owner.map = function (list, fn) {\n    var buffer = this.isArray(list) ? [] : {};\n    this.each(list, function (name, value) {\n      buffer[name] = fn(name, value);\n    });\n    return buffer;\n  };\n\n  /**\n   * 通过路径设置属性值\n   */\n  owner.setByPath = function (obj, path, value) {\n    if (this.isNull(obj) || this.isNull(path) || path === '') {\n      return;\n    }\n    if (!this.isArray(path)) {\n      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n    }\n    this.each(path, function (index, name) {\n      if (this.isNull(name) || name.length < 1) return;\n      if (index === path.length - 1) {\n        obj[name] = value;\n      } else {\n        obj[name] = obj[name] || {};\n        obj = obj[name];\n      }\n    }, this);\n  };\n\n  /**\n   * 通过路径获取属性值\n   */\n  owner.getByPath = function (obj, path) {\n    if (this.isNull(obj) || this.isNull(path) || path === '') {\n      return obj;\n    }\n    if (!this.isArray(path)) {\n      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n    }\n    this.each(path, function (index, name) {\n      if (this.isNull(name) || name.length < 1) return;\n      if (!this.isNull(obj)) obj = obj[name];\n    }, this);\n    return obj;\n  };\n\n  /**\n   * 数组去重\n   **/\n  owner.unique = function (array) {\n    if (this.isNull(array)) return array;\n    var newArray = [];\n    var map = {};\n    this.each(array, function (i, value) {\n      if (map[value]) return;\n      map[value] = true;\n      newArray.push(value);\n    });\n    return newArray;\n  };\n\n  /**\n   * 解析 function 的参数列表\n   **/\n  owner.getFunctionArgumentNames = function (fn) {\n    if (!fn) return [];\n    var src = fn.toString();\n    var parts = src.split(')')[0].split('=>')[0].split('(');\n    return (parts[1] || parts[0]).split(',').map(function (name) {\n      return name.trim();\n    }).filter(function (name) {\n      return name != 'function';\n    });\n  };\n\n  /**\n   * 处理URL\n   * @method wrapUrl\n   * @param  {String} _url 原始URL\n   * @return {String}      处理过的URL\n   * @static\n   */\n  owner.wrapUrl = function (url) {\n    if (this.isNull(url)) return url;\n    if (url.indexOf('?') > -1) {\n      url += \"&__t=\" + this.newGuid();\n    } else {\n      url += \"?__t=\" + this.newGuid();\n    }\n    return url;\n  };\n\n  /**\n   * 休眼\n   * @method sleep\n   * @param {Number} s 休眠时间（毫秒）\n   * @static\n   */\n  owner.sleep = function (s) {\n    var time = (new Date()).getTime() + s;\n    while ((new Date()).getTime() + 1 < time);\n    return;\n  };\n\n  /**\n   * 合并对象\n   * @method mix\n   * @return 合并后的对象\n   * @param {Object} r 目标对象\n   * @param {Object} s 源对象\n   * @param {Boolean} ov 是否覆盖\n   * @param {Object} wl 白名单\n   * @param {Number} mode 模式\n   * @param {Boolean} merge 深度合并\n   */\n  owner.mix = function (r, s, ov, wl, mode, merge) {\n    if (!s || !r) {\n      return r || owner;\n    }\n    //根据模式来判断，默认是Obj to Obj的  \n    if (mode) {\n      switch (mode) {\n        case 1: // proto to proto  \n          return owner.mix(r.prototype, s.prototype, ov, wl, 0, merge);\n        case 2: // object to object and proto to proto  \n          owner.mix(r.prototype, s.prototype, ov, wl, 0, merge);\n          break; // pass through  \n        case 3: // proto to static  \n          return owner.mix(r, s.prototype, ov, wl, 0, merge);\n        case 4: // static to proto  \n          return owner.mix(r.prototype, s, ov, wl, 0, merge);\n        default: // object to object is what happens below  \n      }\n    }\n    // Maybe don't even need this wl && wl.length check anymore??  \n    var i, l, p, type;\n    //白名单如果有值，就对白名单里面的属性进行合并，如果有ov，那么就  \n    if (wl && wl.length) {\n      for (i = 0, l = wl.length; i < l; ++i) {\n        p = wl[i];\n        isObject = owner.isObject(r[p]); //看具体的属性是什么类型的  \n        if (s.hasOwnProperty(p)) { //如果这个属性是p自己的  \n          if (merge && isObject) { //如果设定了merge并且属性是一个对象，那么就调用mix本身，把s[p]的属性加到r[p]上面  \n            owner.mix(r[p], s[p]);\n          } else if (ov || !(p in r)) { //如果允许ov或者r里面没有p，那么就在r里面加上p这个属性  \n            r[p] = s[p];\n          }\n        }\n      }\n    } else { //如果没有wl  \n      for (i in s) { //遍历s里面的属性  \n        if (s.hasOwnProperty(i)) { //如果i是s本身的属性，就按规则合并属性  \n          if (merge && owner.isObject(r[i], true)) {\n            owner.mix(r[i], s[i], ov, wl, 0, true); // recursive  \n          } else if (ov || !(i in r)) {\n            r[i] = s[i];\n          }\n        }\n      }\n    }\n    return r;\n  };\n\n  /**\n   * 缩短字符串\n   */\n  owner.short = function (str, maxLength) {\n    if (!str) return str;\n    maxLength = maxLength || 40;\n    var strLength = str.length;\n    var trimLength = maxLength / 2;\n    return strLength > maxLength ? str.substr(0, trimLength) + '...' + str.substr(strLength - trimLength) : str;\n  };\n\n  /**\n   * 首字母大写\n   */\n  owner.firstUpper = function (str) {\n    if (this.isNull(str)) return;\n    str[0] = str[0].toLowerCase();\n    return str;\n  };\n\n  /**\n   * 解析字符串为 dom \n   * @param {string} str 字符串\n   * @returns {HTMLNode} 解析后的 DOM \n   */\n  owner.parseDom = function (str) {\n    this._PARSER_DOM_DIV = this._PARSER_DOM_DIV || document.createElement('dev');\n    this._PARSER_DOM_DIV.innerHTML = str;\n    var domNodes = this.toArray(this._PARSER_DOM_DIV.childNodes);\n    this._PARSER_DOM_DIV.innerHTML = '';\n    return domNodes;\n  };\n\n  //----\n\n  //兼容AMD模块\n  if (typeof define === 'function' && define.amd) {\n    define('ntils', [], function () {\n      return owner;\n    });\n  }\n\n})((typeof exports === 'undefined') ? (window.ntils = {}) : exports);\n//-"
  ]
}